第十章 内部类

	将一个类的定义放在另一个类的定义内部，就叫做内部类。

一、创建内部类

	e.g.:
		public class Parcel {
		    class Contents {
		       private int value = 11;
		       public int value() {
		           return value;
		       }
		    }
		    class Destination {
		        private String label;
		        Destination(String whereTo) {
		            label = whereTo;
		        }
		        String readLabel() {
		            return label;
		        }
		    }
		    public Contents contents() {
		        return new Contents();
		    }
		    public Destination destination(String s) {
		        return new Destination(s);
		    }
		    public void ship(String dest) {
		        Contents contents = contents();
		        Destination destination = destination(dest);
		        System.out.println(destination.readLabel());
		    }

		    public static void main(String[] args) {
		        Parcel p = new Parcel();
		        p.ship("Tasmania");
		        Parcel q = new Parcel();
		        Parcel.Contents contents = q.contents();
		        Parcel.Destination destination = q.destination("Borneo");
		    }
		}

二、链接到外部类

	当生成一个内部类的对象时，此对象与制造它的外围对象（enclosing object）之间就有了一种联系，所以它能访问其外围对象的所有成员，而不需要
	任何特殊条件。此外，内部类还拥有其外围类的所有元素的访问权。

	e.g.:
		interface Selector {
		    boolean end();
		    Object current();
		    void next();
		}

		public class Sequence {
		    private Object[] items;
		    private int index = 0;
		    public Sequence(int size) {
		        items = new Object[size];
		    }
		    public void add(Object o) {
		        if (index < items.length) {
		            items[index++] = o;
		        }
		    }
		    private class SequenceSelector implements Selector {
		        private int i = 0;
		        @Override
		        public boolean end() {
		            return i == items.length;
		        }
		        @Override
		        public Object current() {
		            return items[i];
		        }
		        @Override
		        public void next() {
		            if (i < items.length) {
		                i++;
		            }
		        }
		    }

		    public Selector selector() {
		        return new SequenceSelector();
		    }

		    public static void main(String[] args) {
		        Sequence sequence = new Sequence(10);
		        for ( int i = 0; i < 10; i++ ) {
		            sequence.add(Integer.toString(i));
		        }
		        Selector selector = sequence.selector();
		        while (!selector.end()) {
		            System.out.println(selector.current() + " ");
		            selector.next();
		        }
		    }
		}
			
三、使用.this与.new

	如果需要生成对外部类对象的引用，可以使用外部类的名字后面紧跟.this。
	e.g.:
		public class DotThis {
		    void f() {
		        System.out.println("DotThis.f()");
		    }
		    public class Inner {
		        public DotThis outer() {
		            return DotThis.this;
		        }
		    }
		    public Inner inner() {
		        return new Inner();
		    }

		    public static void main(String[] args) {
		        DotThis dotThis = new DotThis();
		        DotThis.Inner dti = dotThis.inner();
		        dti.outer().f();
		    }
		}

	要想直接创建内部类的对象，必须使用外部类的对象来创建该内部类对象。
	在拥有外部类对象之前是不可能创建内部类对象的。这是因为内部类对象会暗暗地连接到创建它的外部类对象上。但是，如果你创建的是嵌套类（静态
	内部类），那么它就不需要对外部类对象的引用。
	e.g.:
		public class DotThis {
		    void f() {
		        System.out.println("DotThis.f()");
		    }
		    public class Inner {
		        public DotThis outer() {
		            return DotThis.this;
		        }
		    }
		    public Inner inner() {
		        return new Inner();
		    }

		    public static void main(String[] args) {
		        DotThis dotThis = new DotThis();
		        DotThis.Inner dti = dotThis.inner();
		        dti.outer().f();
		    }
		}


四、内部类与向上转型
	e.g.:
		interface Destination {
		    String readLabel();
		}
		interface Contents {
		    int value();
		}

		class Parcel2 {
		    private class PContents implements Contents {
		        private int i = 11;
		        @Override
		        public int value() {
		            return i;
		        }
		    }
		    protected class PDestination implements Destination {
		        private String label;
		        private PDestination(String label) {
		            this.label = label;
		        }
		        @Override
		        public String readLabel() {
		            return label;
		        }
		    }
		    public Destination destination(String dest) {
		        return new PDestination(dest);
		    }
		    public Contents contents() {
		        return new PContents();
		    }
		}

		public class TestParcel {
		    public static void main(String[] args) {
		        Parcel2 parcel2 = new Parcel2();
		        Contents contents = parcel2.contents();
		        Destination destination = parcel2.destination("Tasmania");
		        // Illegal -- can't access private class
		        // ! Parcel2.PContents pc = p.new PContents();
		    }
		}

五、在方法和作用域内的内部类

	可以在一个方法里面或者任意的作用域内定义内部类：
		1. 如前所述，实现某类型的接口，于是可以创建并返回对其的引用。
		2. 想创建一个辅助类，但又不想这个类是公用的。
	e.g.:
		局部内部类：
		interface Destination3 {}
		public class Parcel3 {
		    public Destination3 destination(String dest) {
		        class PDestination3 implements Destination3 {
		            private String label;
		            private PDestination3(String label) {
		                this.label = label;
		            }
		            public String readLabel() {
		                return label;
		            }
		        }
		        return new PDestination3("Tasmania");
		    }
		    public static void main(String[] args) {
		        Parcel3 parcel3 = new Parcel3();
		        Destination3 desctination3 = parcel3.destination("Tasmania");
		    }
		}

		作用域嵌入内部类：
		public class Parcel4 {
			private void internalTracking(boolean b) {
				if(b) {
					class TrackingSlip {
						private String slip;
						TrackingSlip(String slip) {
							this.slip = slip;
						}
						public String getSlip() {
							return slip;
						}
					}
					TrackingSlip trackingSlip = new TrackingSlip("Tasmania");
					String label = trackingSlip.getSlip();
				}
				// Can't use it here! Out of scope;
				// ! TrackingSlip ts = new TrackingSlip("Tasmania");
			}
			public void track() {
				internalTracking(true);
			}
			public static void main(String[] args) {
				Parcel4 parcel4 = new Parcel4();
				parcel4.track();
			}
		}

六、匿名内部类
	
	匿名内部类既可以扩展类，也可以实现接口，但是不能两者兼备。而且如果是实现接口，也只能实现一个接口。

七、嵌套类
	
	嵌套类意味着：
		1. 要创建嵌套类的对象，并不需要其外围类的对象。
		2. 不能从嵌套类的对象中访问非静态的外围类对象。
	普通内部类的字段和方法，只能放在类的外部层次上，所以普通的内部类不能有static数据和static字段，也不能包含嵌套类。但是嵌套类可以包含
	所有这些东西。

	e.g.:
		接口内部的类：
		public interface ClassInInterface {
			void howdy();
			class Test implements ClassInInterface {
				public void howdy() {
					System.out.println("howdy!");
				}
				public static void main(String[] args) {
					new Test().howdy();
				}
			}
		}

		从多层嵌套类中访问外部类的成员
		class MNA {
			private void f() {}
			class A {
				private void g() {}
				public class B {
					void h() {
						f();
						g();
					}
				}
			}
		}

		public class MultiNestingAccess {
			public static void main(String[] args) {
				MNA mna = new MNA();
				MNA.A mnaa = mna.new A();
				MNA.A.B mnaab = mnaa.new B();
				mnaab.h();
			}
		}

八、为什么需要内部类
	
	每个内部类都能独立地继承自一个（接口）的实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。

	Tips:
		1. 内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外围类对象的信息相互独立。
		2. 在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或继承自同一个类。
		3. 创建内部类对象的时刻并不依赖与外围类对象的创建。
		4. 内部类并没有令人迷惑的“is-a”关系；它就是一个独立的实体。

	1. 闭包与回调
		闭包（closure）是一个可调用的对象，它记录了一些信息，这些信息来自于创建它的作用域。

		回调的价值在于它的灵活性----可以在运行时动态地决定需要调用什么方法。
		e.g.:
			interface Incrementable {
			    void increment();
			}
			class Callee1 implements Incrementable {
			    private int i = 0;
			    @Override
			    public void increment() {
			        i++;
			        System.out.println(i);
			    }
			}
			class MyIncrement {
			    public void increment() {
			        System.out.println("Other operation");
			    }
			    static void f(MyIncrement increment) {
			        increment.increment();
			    }
			}
			class Callee2 extends MyIncrement {
			    private int i = 0;
			    @Override
			    public void increment() {
			        super.increment();
			        i++;
			        System.out.println(i);
			    }
			    private class Closure implements Incrementable {
			        @Override
			        public void increment() {
			            Callee2.this.increment();
			        }
			    }
			    Incrementable getCallbackReference() {
			        return new Closure();
			    }
			}
			class Caller {
			    private Incrementable callbackReference;
			    Caller(Incrementable cbn) {
			        callbackReference = cbn;
			    }
			    void go() {
			        callbackReference.increment();
			    }
			}
			public class CallBacks {
			    public static void main(String[] args) {
			        Callee1 callee1 = new Callee1();
			        Callee2 callee2 = new Callee2();
			        MyIncrement.f(callee2);
			        Caller caller1 = new Caller(callee1);
			        Caller caller2 = new Caller(callee2.getCallbackReference());
			        caller1.go();
			        caller1.go();
			        caller2.go();
			        caller2.go();
			    }
			}

	2. 内部类与控制框架
	e.g.:
		public class Controller {
		    private List<Event> eventList = new ArrayList<Event>();
		    public void addEvent(Event c) {
		        eventList.add(c);
		    }
		    public void run() {
		        while (eventList.size() > 0) {
		            // Make a copy so you're not modifying the list while you're selecting the elements in it;
		            for ( Event event : new ArrayList<Event>(eventList) ) {
		                if (event.ready()) {
		                    System.out.println(event);
		                    event.action();
		                    eventList.remove(event);
		                }
		            }
		        }
		    }
		}

		public class GreenHouseControls extends Controller {
		    private boolean light = false;
		    public class LightOn extends Event {
		        public LightOn(long delayTime) {
		            super(delayTime);
		        }
		        @Override
		        public void action() {
		            // Put hardware control code here to physically turn on the light;
		            light = true;
		        }
		        @Override
		        public String toString() {
		            return "Light is on";
		        }
		    }
		    public class LightOff extends Event {
		        public LightOff(long delayTime) {
		            super(delayTime);
		        }
		        @Override
		        public void action() {
		            // Put hardware control code here to physically turn off the light;
		            light = false;
		        }
		        @Override
		        public String toString() {
		            return "Light is off";
		        }
		    }
		    private boolean water = false;
		    public class waterOn extends Event {
		        public waterOn(long delayTime) {
		            super(delayTime);
		        }
		        @Override
		        public void action() {
		            // Put hardware control code here
		            water = true;
		        }
		        @Override
		        public String toString() {
		            return "Greenhouse Water is on";
		        }
		    }
		    public class waterOff extends Event {
		        public waterOff(long delayTime) {
		            super(delayTime);
		        }
		        @Override
		        public void action() {
		            // Put hardware control code here
		            water = false;
		        }
		        @Override
		        public String toString() {
		            return "Greenhouse Water is off";
		        }
		    }
		    private String thermostat = "Day";
		    public class ThermostatNight extends Event {
		        public ThermostatNight(long delayTime) {
		            super(delayTime);
		        }
		        @Override
		        public void action() {
		            thermostat = "Night";
		        }
		        @Override
		        public String toString() {
		            return "Thermostat on night setting";
		        }
		    }
		    public class ThermostatDay extends Event {
		        public ThermostatDay(long delayTime) {
		            super(delayTime);
		        }
		        @Override
		        public void action() {
		            thermostat = "Day";
		        }
		        @Override
		        public String toString() {
		            return "Thermostat on day setting";
		        }
		    }
		    //
		    public class Bell extends Event {
		        public Bell(long delayTime) {
		            super(delayTime);
		        }
		        @Override
		        public void action() {
		            addEvent(new Bell(delayTime));
		        }
		        @Override
		        public String toString() {
		            return "Bing";
		        }
		    }
		    public class Restart extends Event {
		        private Event[] eventList;
		        public Restart(long delayTime, Event[] eventList) {
		            super(delayTime);
		            this.eventList = eventList;
		            for ( Event event : eventList ) {
		                addEvent(event);
		            }
		        }
		        @Override
		        public void action() {
		            for ( Event event : eventList ) {
		                event.start();  //Rerun each event
		                addEvent(event);
		            }
		            start();
		            addEvent(this);
		        }
		        @Override
		        public String toString() {
		            return "Restarting system";
		        }
		    }
		    public static class Terminate extends Event {
		        public Terminate(long delayTime) {
		            super(delayTime);
		        }
		        @Override
		        public void action() {
		            System.exit(0);
		        }
		        @Override
		        public String toString() {
		            return "Terminating";
		        }
		    }

		}

		public class GreenHouseController {
		    public static void main(String[] args) {
		        GreenHouseControls controls = new GreenHouseControls();
		        controls.addEvent(controls.new Bell(900));
		        Event[] eventList = {
		            controls.new ThermostatNight(0),
		            controls.new LightOn(200),
		            controls.new LightOff(400),
		            controls.new WaterOn(600),
		            controls.new WaterOff(800),
		            controls.new ThermostatDay(1400),
		        };
		        controls.addEvent(controls.new Restart(2000, eventList));
		        if (args.length == 1) {
		            controls.addEvent(new GreenHouseControls.Terminate(new Integer(args[0])));
		        }
		        controls.run();	
		    }
		}

九、内部类的继承

	class WithInner {
	    class Inner {};
	}
	public class InheritInner extends WithInner.Inner {
	    // !InheritInner() {} Won't compile
	    InheritInner(WithInner withInner) {
	        withInner.super();
	    }

	    public static void main(String[] args) {
	        WithInner withInner = new WithInner();
	        InheritInner inheritInner = new InheritInner(withInner);
	    }
	}

十、内部类可以被覆盖吗？
	e.g.:
		class Egg {
		    private Yolk yolk;
		    protected class Yolk {
		        public Yolk() {
		            System.out.println("Egg.Yolk()");
		        }
		    }
		    public Egg() {
		        System.out.println("new Egg()");
		        yolk = new Yolk();
		    }
		}

		public class BigEgg extends Egg {
		    public class Yolk {
		        public Yolk() {
		            System.out.println("BigEgg.Yolk()");
		        }
		    }
		    public static void main(String[] args) {
		        new BigEgg();
		    }
		}


十一、局部内部类
	
	局部内部类不能访问说明符，因为它不是外围类的一部分，但是它可以访问当前代码块内的常量，以及此外围类的所有成员。
	e.g.:
		interface Counter {
		    int next();
		}
		public class LocalInnerClass {
		    private int count = 0;
		    Counter getCounter(final String name) {
		        // A local inner class
		        class LocalCounter implements Counter {
		            public LocalCounter() {
		                System.out.println("LocalCounter()");
		            }
		            @Override
		            public int next() {
		                System.out.println(name);
		                return count++;
		            }
		        }
		        return new LocalCounter();
		    }
		    // The same thing with an anonymous inner class;
		    Counter getCounter2 (final String name) {
		        return new Counter() {
		            // Anonymous inner class cannot have a named constructor, only an instance initializer
		            {
		                System.out.println("Counter()");
		            }
		            @Override
		            public int next() {
		                System.out.println(name);
		                return count++;
		            }
		        };
		    }
		    public static void main(String[] args) {
		        LocalInnerClass localInnerClass = new LocalInnerClass();
		        Counter counter1 = localInnerClass.getCounter("local inner "),
		                counter2 = localInnerClass.getCounter2("Anonymous inner ");
		        for ( int i = 0; i < 5; i++ ) {
		            System.out.println(counter1.next());
		        }
		        for ( int i = 0; i < 5; i++ ) {
		            System.out.println(counter2.next());
		        }
		    }
		}


十二、内部类标识符

	如果内部类是匿名的，编译器会简单地产生一个数字作为其标识符。
	如果内部类是嵌套在别的内部类之中，只需直接将它们的名字加在其外围类标识符与"$"的后面。

