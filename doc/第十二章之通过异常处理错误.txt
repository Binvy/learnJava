第十二章 通过异常处理错误

一、概念
	
二、基本异常

	异常情形（excptional condition）是指阻止当前方法或作用域继续执行的问题。
	异常处理程序：将程序从错误状态中恢复，以使程序能要么换一种方式运行，要么继续运行下去。

	e.g.:
		if(t == null) {
			throw new NullPointerException();
		}

	异常参数：

	e.g.:
		throw new NullPointerException("t = null");

	能够抛出任意类型的Throwable对象，它是异常类型的根类。
	对于不同类型的错误，要抛出相应的异常。
	错误信息可以保存在异常对象内部或者用异常类的名字来暗示。上一层环境通过这些信息来决定怎么处理异常。

三、捕获异常

	监控区域（guarded region）：一段可能产生异常的代码，并且后面跟着处理这些异常的代码。

	1. try块

		try {
			// Code that might generate exceptions
		}

	2. 异常处理程序

		try {
			// Code that might generate exceptions
		} catch(Type1 id1) {
			// Handle exceptions of Type1
		} catch(Type2 id2) {
			// Handle exceptions of Type2
		} catch(Type3 id3) {
			// Handle exceptions of Type3
		}
		
		终止：
			将假设错误非常关键，以至于程序无法返回到异常发生的地方继续执行。

		恢复：
			异常处理程序的工作是修正错误，然后重新尝试调用出问题的方法，并认为第二次能成功。

四、创建自定义异常
	
	要定义自己的异常类，必须从已有的异常类继承。

	e.g.:
		class SimpleException extends Exception { }
		public class InheritingExceptions {
		    public void f() throws SimpleException {
		        System.out.println("Throw SimpleException from f()");
		        throw new SimpleException();
		    }

		    public static void main(String[] args) {
		        InheritingExceptions inheritingExceptions = new InheritingExceptions();
		        try {
		            inheritingExceptions.f();
		        } catch (SimpleException e) {
		            e.printStackTrace();
		            System.out.println("Caught it!");
		        }
		    }
		}

		class MyException extends Exception {
		    MyException() { }
		    MyException(String msg) { super(msg); }
		}
		public class FullConstructors {
		    public static void f() throws MyException {
		        System.out.println("Throwing MyException from f()");
		        throw new MyException();
		    }
		    public static void g() throws MyException{
		        System.out.println("Throwing MyException from g()");
		        throw new MyException("Originated in g()");
		    }

		    public static void main(String[] args) {
		        try {
		            f();
		        } catch (MyException e) {
		            e.printStackTrace();
		        }
		        try {
		            g();
		        } catch (MyException e) {
		            e.printStackTrace();
		        }
		    }
		}

	1. 异常与记录日志

	e.g.:
		public class ExtraFeatures {
		    public static void f() throws MyException2{
		        System.out.println("Throw MyException2 from f()");
		        throw new  MyException2();
		    }
		    public static void g() throws MyException2{
		        System.out.println("Throw MyException2 from g()");
		        throw new  MyException2("Originated in g()");
		    }
		    public static void h() throws MyException2{
		        System.out.println("Throw MyException2 from h()");
		        throw new  MyException2("Originated in h()", 47);
		    }

		    public static void main(String[] args) {
		        try {
		            f();
		        } catch (MyException2 e) {
		            e.printStackTrace(System.out);
		        }
		        try {
		            g();
		        } catch (MyException2 e) {
		            e.printStackTrace(System.out);
		        }
		        try {
		            h();
		        } catch (MyException2 e) {
		            e.printStackTrace(System.out);
		            System.out.println(("e.val() = " + e.val()));
		        }
		    }
		}

		class MyException2 extends Exception {
		    private int x;
		    public MyException2() {}
		    public MyException2(String msg) {
		        super(msg);
		    }
		    public MyException2(String msg, int x) {
		        super(msg);
		        this.x = x;
		    }
		    public int val() {
		        return x;
		    }
		    @Override
		    public String getMessage() {
		        return "Detail Message:" + x + " " + super.getMessage();
		    }
		}

五、异常说明

	e.g.:
		void f() throws TooSmal, TooBig, DivZero { 
			// Code that might generate Exceptions
		}

六、捕获所有异常

	异常相关方法
	e.g.:
		public class ExceptionMethod {
		    public static void main(String[] args) {
		        try {
		            throw new Exception("My Exception");
		        } catch (Exception e) {
		            System.out.println("Caught Exception");
		            System.out.println("getMessage() " + e.getMessage());
		            System.out.println("getLocalizedMessage() " + e.getLocalizedMessage());
		            System.out.println("getCause() " + e.getCause());
		            System.out.println("getStackTrace() " + e.getStackTrace());
		            System.out.println("getSuppressed() " + e.getSuppressed());
		            System.out.println("getClass() " + e.getClass());
		            System.out.println("toString() " + e);
		            System.out.println("printStackTrace() ");
		            e.printStackTrace(System.out);
		        }
		    }
		}

	栈轨迹
	e.g.:
		public class WhoCalled {
		    public static void f() {
		        try {
		            throw new Exception();
		        } catch (Exception e) {
		            for (StackTraceElement element: e.getStackTrace()) {
		                System.out.println(element.getMethodName());
		            }
		        }
		    }
		    public static void g() { f(); }
		    public static void h() { g(); }

		    public static void main(String[] args) {
		        f();
		        System.out.println("----------------------");
		        g();
		        System.out.println("----------------------");
		        h();
		        System.out.println("----------------------");
		    }
		}

	重新抛出对象
		try {
			// Code that might generate exceptions
		} catch (Exception e) {
			System.out.println("An exception was thrown");
			throw e;
		} 

	e.g.:
		public class Rethrowing {
		    public static void f() throws Exception{
		        System.out.println("originating the exception in f()");
		        throw new Exception("throw from f()");
		    }
		    public static void g() throws Exception {
		        try {
		            f();
		        } catch (Exception e) {
		            System.out.println("Inside g(), e.printStackTrace()");
		            e.printStackTrace(System.out);
		            throw e;
		        }
		    }
		    public static void h() throws Exception {
		        try {
		            f();
		        } catch (Exception e) {
		            System.out.println("Inside h(), e.printStackTrace()");
		            e.printStackTrace(System.out);
		            throw (Exception)e.fillInStackTrace();
		        }
		    }

		    public static void main(String[] args) {
		        try {
		            g();
		        } catch (Exception e) {
		            System.out.println("main: printStackTrace()");
		            e.printStackTrace(System.out);
		        }
		        try {
		            h();
		        } catch (Exception e) {
		            System.out.println("main: printStackTrace()");
		            e.printStackTrace(System.out);
		        }
		    }
		}

	异常链
	e.g.:
		class DynamicFieldsException extends Exception { }
		public class DynamicFileds {
		    private Object[][] fields;
		    public DynamicFileds(int initialSize) {
		        fields = new Object[initialSize][2];
		        for ( int i = 0; i < initialSize; i++ ) {
		            fields[i] = new Object[] {null, null};
		        }
		    }
		    @Override
		    public String toString() {
		        StringBuilder result = new StringBuilder();
		        for (Object[] object : fields) {
		            result.append(object[0]);
		            result.append(":");
		            result.append(object[1]);
		            result.append("\n");
		        }
		        return result.toString();
		    }
		    private int hasFiled(String id) {
		        for ( int i = 0; i < fields.length; i++ ) {
		            if (id.equals(fields[i][0])) {
		                return i;
		            }
		        }
		        return -1;
		    }
		    private int getFiledNumber(String id) throws NoSuchFieldException {
		        int filedName =hasFiled(id);
		        if (filedName == -1) {
		            throw new NoSuchFieldException();
		        }
		        return filedName;
		    }
		    private int makeFiled(String id) {
		        for ( int i = 0; i < fields.length; i++ ) {
		            if (fields[i][0] == null) {
		                fields[i][0] = id;
		                return i;
		            }
		        }
		        // No empty fields, Add one
		        Object[][] temp = new Object[fields.length + 1][2];
		        for ( int i = 0; i < fields.length; i++ ) {
		            temp[i] = fields[i];
		        }
		        for ( int i = fields.length; i < temp.length; i++ ) {
		            temp[i] = new Object[] {null, null};
		        }
		        fields = temp;
		        // Recursive call with expanded fields
		        return makeFiled(id);
		    }
		    public Object getFiled(String id) throws NoSuchFieldException {
		        return fields[getFiledNumber(id)];
		    }
		    public Object setFiled(String id, Object value) throws DynamicFieldsException{
		        if (value == null) {
		            DynamicFieldsException dynamicFieldsException = new DynamicFieldsException();
		            dynamicFieldsException.initCause(new NullPointerException());
		            throw dynamicFieldsException;
		        }
		        int fieldNumber = hasFiled(id);
		        if (fieldNumber == -1) {
		            fieldNumber = makeFiled(id);
		        }
		        Object result = null;
		        try {
		            result = getFiled(id);
		        } catch (NoSuchFieldException e) {
		            throw new RuntimeException(e);
		        }
		        fields[fieldNumber][1] = value;
		        return result;
		    }

		    public static void main(String[] args) {
		        DynamicFileds dynamicFileds = new DynamicFileds(3);
		        System.out.println(dynamicFileds);
		        try {
		            dynamicFileds.setFiled("d", "A value for d");
		            dynamicFileds.setFiled("number", 47);
		            dynamicFileds.setFiled("number2", 48);
		            System.out.println(dynamicFileds);
		            dynamicFileds.setFiled("d", "A new value for d");
		            dynamicFileds.setFiled("number3", 11);
		            System.out.println("dynamicField:" + dynamicFileds);
		            System.out.println("dynamicField(\"d\") : " + dynamicFileds.getFiled("d"));
		            Object field = dynamicFileds.setFiled("d", null);
		        } catch (DynamicFieldsException e) {
		            e.printStackTrace();
		        } catch (NoSuchFieldException e) {
		            e.printStackTrace();
		        }
		    }
		}

七、Java标准异常

	Throwable的两种类型：
		1. Error 用来表示编译时和系统错误。
		2. Exception 在Java类库、用户方法以及运行时故障都可能被抛出的类型

八、使用finally进行清理

	e.g.:
		public class FinallyWorks {
		    static int count = 0;
		    public static void main(String[] args) {
		        while (true) {
		            try {
		                if (count++ == 0) {
		                    throw new MyException3();
		                }
		                System.out.println("No exception");
		            } catch (MyException3 myException3) {
		                myException3.printStackTrace();
		            } finally {
		                System.out.println("In finally clause");
		                if (count == 2) break;
		            }
		        }
		    }
		}
		class MyException3 extends Exception { }

	1. finally用来做什么？
		e.g.:
			class Switcher {
			    private boolean state = false;
			    public boolean read() { return state; }
			    public void on() {
			        state = true;
			        System.out.println(this);
			    }
			    public void off(){
			        state = false;
			        System.out.println(this);
			    }
			    @Override
			    public String toString() {
			        return state ? "on" : "off";
			    }
			}
			class OnOffException1 extends Exception { }
			class OnOffException2 extends Exception { }
			public class Switch {
			    private static Switcher switcher = new Switcher();
			    public static void f() throws OnOffException1, OnOffException2 { }
			    public static void main(String[] args) {
			        try {
			            switcher.on();
			            f();
			        } catch (OnOffException2 onOffException2) {
			            onOffException2.printStackTrace();
			        } catch (OnOffException1 onOffException1) {
			            onOffException1.printStackTrace();
			        } finally {
			            switcher.off();
			        }
			    }
			}

		class FourException extends Exception {}
		public class AlwaysFinally {
		    public static void main(String[] args) {
		        System.out.println("Entering first try block");
		        try {
		            System.out.println("Entering second try block");
		            try {
		                throw new FourException();
		            } finally {
		                System.out.println("finally in 2nd try block");
		            }

		        } catch (FourException e) {
		            System.out.println("Caught FourException in 1st block");
		        } finally {
		            System.out.println("finally in 1st try block");
		        }
		    }
		}

	2. 在return中使用finally
		e.g.:
			public class MultipleReturns {
			    public static void f(int i) {
			        System.out.println("Initialization that requires cleanup");
			        try {
			            System.out.println("Point 1");
			            if (i == 1) {
			                return;
			            }
			            System.out.println("Point 2");
			            if (i == 2) {
			                return;
			            }
			            System.out.println("Point 3");
			            if (i == 3) {
			                return;
			            }
			            System.out.println("End");
			            return;
			        } finally {
			            System.out.println("Performing cleanup");
			        }
			    }

			    public static void main(String[] args) {
			        for ( int i = 1; i <= 4; i++ ) {
			            f(i);
			        }
			    }
			}
	3. 缺憾：异常丢失
		e.g.:

		class VeryImportantException extends Exception {
		    @Override
		    public String toString() {
		        return "A very important exception!";
		    }
		}
		class HoHumException extends Exception {
		    @Override
		    public String toString() {
		        return "A trivial exception";
		    }
		}
		public class LostMessage {
		    void f() throws VeryImportantException {
		        throw new VeryImportantException();
		    }
		    void dispose() throws HoHumException {
		        throw new HoHumException();
		    }

		    public static void main(String[] args) {
		        try {
		            LostMessage lostMessage = new LostMessage();
		            try {
		                lostMessage.f();
		            } finally {
		                lostMessage.dispose();
		            }
		        } catch (Exception e) {
		            e.printStackTrace();
		        }

		    }
		}

		public class ExceptionSilencer {
		    public static void main(String[] args) {
		        try {
		            throw new RuntimeException();
		        } finally {
		        	// Using 'return' inside the finally block will silence any throw exception
		            return;
		        }
		    }
		}

九、异常的限制
	
	尽管在继承过程中，编译器会对异常说明做出强制要求，但异常说明本身并不属于方法类型的一部分，方法类型是由方法的名字和参数的类型
	组成的。因此，不能基于异常说明来重载方法。此外，一个出现在基类方法的异常说明中的异常，不一定会出现在派生类方法的异常说明里。

	异常限制对构造器不起作用。派生类构造器不能捕获基类构造器抛出的异常。

	e.g.:

		class BaseballExceptino extends Exception {}
		class Foul extends BaseballExceptino {}
		class Strike extends BaseballExceptino {}
		abstract class Inning {
		    public Inning() throws BaseballExceptino {}
		    public void event() throws BaseballExceptino {
		        // Does't actually have to throw anything
		    }
		    public abstract void atBat() throws Strike, Foul;
		    public void walk() {}; // Throw no checked exception
		}
		class StormException extends Exception {}
		class RainedOut extends StormException {}
		class PopFoul extends Foul {}
		interface Storm {
		    public void event() throws RainedOut;
		    public void rainHard() throws RainedOut;
		}
		public class StormInning extends Inning implements Storm{
		    // OK to add new exceptions for constructors, but you must deal with the base constructor exceptions;
		    public StormInning() throws RainedOut, BaseballExceptino { }
		    public StormInning (String s) throws Foul, BaseballExceptino {}
		    // Regular methods must conform to base class;
		    // ! void walk() throws PopFoul {} // Compile error

		    // Interface cannot add exceptions to existing methods from the base class;
		    // If the method doesn't already exist in the base class, the exception is OK;
		    // ! public void event() throws RainedOut {}
		    @Override
		    public void rainHard() throws RainedOut { }
		    // You can choose to not throw any exception, even if the base version does;
		    @Override
		    public void event() { }
		    // Override methods can throw inherited exceptions
		    @Override
		    public void atBat() throws Strike, Foul { }

		    public static void main(String[] args) {
		        try {
		            StormInning stormInning = new StormInning();
		            stormInning.atBat();
		        } catch (PopFoul e) {
		            System.out.println("Pop Foul");
		        } catch (RainedOut e) {
		            System.out.println("Rained out");
		        } catch (BaseballExceptino e) {
		            System.out.println("Generic baseball exception");
		        }
		        // Strike not thrown in derived version
		        try {
		            // What happens if you upcast?
		            Inning i = new StormInning();
		        } catch (Strike e) {
		            System.out.println("Strike");
		        } catch (Foul e) {
		            System.out.println("Foul");
		        } catch (BaseballExceptino e) {
		            System.out.println("Generic baseball exception");
		        } catch (RainedOut e) {
		            System.out.println("Rained out");
		        }

		    }
		}

十、构造器

	对于可以失败的构造器的每次构造，都必须包含在其自己的try-catch语句块中，并且每一个对象构造必须都跟随一个try-catch语句块确保清理。
	e.g.:
		class NeedsCleanup {
		    private static long counter = 1;
		    private final long id = counter++;
		    public void dispose() {
		        System.out.println("NeedsCleanup " + id + "disposed");
		    }
		}
		class ConstructionException extends Exception {}
		class NeedsCleanup2 extends NeedsCleanup {
		    // Construction can fail
		    public NeedsCleanup2() throws ConstructionException {}
		}
		public class CleanupIdiom {
		    public static void main(String[] args) {
		        // Section1
		        NeedsCleanup needsCleanup = new NeedsCleanup();
		        try {
		            // ...
		        } finally {
		            needsCleanup.dispose();
		        }
		        // Section2
		        // If construction cannot fail you can group objects
		        NeedsCleanup nc2 = new NeedsCleanup();
		        NeedsCleanup nc3 = new NeedsCleanup();
		        try {
		            // ...
		        } finally {
		            nc3.dispose(); // Reverse order of construction
		            nc2.dispose();
		        }
		        // Section3
		        //If construction can fail you must guard each one;
		        try {
		            NeedsCleanup2 nc4 = new NeedsCleanup2();
		            try {
		                NeedsCleanup2 nc5 = new NeedsCleanup2();
		                try {
		                    // ...
		                } finally {
		                    nc5.dispose();
		                }
		            } catch (ConstructionException e) { // nc5 constructor
		                System.out.println(e);
		            } finally {
		                nc4.dispose();
		            }
		        } catch (ConstructionException e) { // nc4 constructor
		            System.out.println(e);
		        }
		    }
		}

十一、异常匹配

	如果想把派生类的异常“屏蔽”掉，可以把捕获基类的catch字句放在最前面。
	e.g.:
		class Annoyance extends Exception {}
		class Sneeze extends Annoyance {}
		public class Human {
		    public static void main(String[] args) {
		        // Catch the exact type
		        try {
		            throw new Sneeze();
		        } catch (Sneeze sneeze) {
		            System.out.println("Caught sneeze");
		        } catch (Annoyance annoyance) {
		            System.out.println("Caught annoyance");
		        }
		        // Catch the base type
		        try {
		            throw new Sneeze();
		        } catch (Annoyance annoyance) {
		            System.out.println("Caught Annoyance");
		        }
		    }
		}

十二、其他可选方式
	e.g.:
		class WrapCheckedException {
		    void throwRunTimeException(int type) {
		        try {
		            switch (type) {
		                case 0: throw new FileNotFoundException();
		                case 1: throw new IOException();
		                case 2: throw new RuntimeException("Where am I?");
		                default: return;
		            }
		        } catch (Exception e) {
		            throw new RuntimeException(e);
		        }
		    }
		}
		class SomeOtherException extends Exception {}
		public class TurnOffChecking {
		    public static void main(String[] args) {
		        WrapCheckedException wce = new WrapCheckedException();
		        // You can call throwRunTimeException() without a try block, and let RuntimeExceptions leave the method;
		        wce.throwRunTimeException(3);
		        // Or you can choose to catch exception;
		        for ( int i = 0; i < 4; i++ ) {
		            try {
		                if (i < 3) {
		                    wce.throwRunTimeException(i);
		                } else {
		                    throw new SomeOtherException();
		                }
		            } catch (SomeOtherException e) {
		                System.out.println("SomeOtherException: " + e);
		            } catch (RuntimeException re) {
		                try {
		                    throw re.getCause();
		                } catch (FileNotFoundException e) {
		                    System.out.println("FileNotFoundException: " + e);
		                } catch (IOException e) {
		                    System.out.println("IOException: " + e);
		                } catch (Throwable e) {
		                    System.out.println("Throwable: " + e);
		                }
		            }
		        }
		    }
		}

十三、异常使用指南

	应该在下列情况下使用异常：
		1. 在恰当的级别处理问题。（在知道如何处理异常的情况下才捕获异常）
		2. 解决问题并且重新调用产生异常的方法。
		3. 进行少许修补，然后绕过异常发生的地方继续执行。
		4. 用别的数据进行计算，以替代方法预计会返回的值。
		5. 把当前运行环境下能做的事情尽量做完，然后把相同的异常重抛到更高层。
		6. 把当前运行环境下能做的事情尽量做完，然后把不同的异常抛到更高层。
		7. 终止程序。
		8. 进行简化。（如果你的异常模式使问题变得太复杂，那用起来会非常痛苦也很烦人。）
		9. 让库类和程序更安全。(这既是在为调试做短期投资，也是在为程序的健壮性做长期投资。)


