第十六章、数组

一、数组为什么特殊

    数组与其他容器的区别：效率、类型、保存基本类型的能力。
    Java中，数组是一种效率最高的存储和随机访问对象引用序列的方式。
    e.g.:
        class BerylliumSphere{
            public static long count = 0;
            public final long id = count++;
            @Override
            public String toString() {
                return  "Sphere-" + id;
            }
        }
        public class ContainerComparison {
            public static void main(String[] args) {
                BerylliumSphere[] arrays = new BerylliumSphere[10];
                for ( int i = 0; i < 5; i++ ) {
                    arrays[i] = new BerylliumSphere();
                }
                System.out.println(Arrays.toString(arrays));
                System.out.println(arrays[4]);

                List<BerylliumSphere> list = new ArrayList<>();
                for ( int i = 0; i < 5; i++ ) {
                    list.add(new BerylliumSphere());
                }
                System.out.println(list);
                System.out.println(list.get(4));

                int[] ints = {0, 1, 2, 3, 4, 5};
                System.out.println(Arrays.toString(ints));
                System.out.println(ints[4]);

                List<Integer> lists = new ArrayList<>(Arrays.asList(0, 1, 2, 3, 4, 5));
                System.out.println(lists);
                System.out.println(lists.get(4));
            }
        }

二、数组是第一级对象
    无论使用哪种类型的数组，数组标识其实只是一个引用，指向堆中创建的一个真是对象，这个（数组）对象用以保存指向其他对象的引用。
    可以作为数组初始化语法的一部分隐式地创建此对象，或者用new表达式显示地创建。
    只读成员length是数组对象的一部分（事实上，这是唯一一个可以访问的字段和方法），表示次数组对象存储多少个元素。
    “[]”语法是访问数组对象唯一的方式。
    e.g.:
        public class ArrayOption {
            public static void main(String[] args) {
                // Array of objects:
                BerylliumSphere[] a;
                BerylliumSphere[] b = new BerylliumSphere[5];
                BerylliumSphere[] c = new BerylliumSphere[4];
                for ( int i = 0; i < c.length; i++ ) {
                    if (c[i] == null) {
                        c[i] = new BerylliumSphere();
                    }
                }
                BerylliumSphere[] d = {new BerylliumSphere(), new BerylliumSphere(), new BerylliumSphere()};
                a = new BerylliumSphere[]{new BerylliumSphere(), new BerylliumSphere(), new BerylliumSphere()};

                //Arrays of primitives
                int[] e;
                int[] f = new int[5];
                int[] g = new int[4];
                for ( int i = 0; i < g.length; i++ ) {
                    if (g[i] == 0) {
                        g[i] = i * i;
                    }
                }
                int[] h = {11, 47, 93};
                e = new int[]{1, 2, 3, 4};
            }
        }

三、返回一个数组

    e.g.:
        public class IceCream {
            private static Random random = new Random(47);
            private static final String[] FLAVORS =
                    {"Chocolate", "Strawberry", "Vanilla Fudge Swirl", "Mint Chip",
                            "Mocha Almond Fudge", "Rum Raisin", "Praline Cream", "Mud Pie"};

            public static String[] flavorSet(int n) {
                if (n > FLAVORS.length) {
                    System.out.println("Set too long!");
                    System.exit(0);
                }
                String[] result = new String[n];
                boolean[] picked = new boolean[FLAVORS.length];
                for ( int i = 0; i < n; i++ ) {
                    int t;
                    do {
                        t = random.nextInt(FLAVORS.length);
                    }while (picked[t]);
                    result[i] = FLAVORS[t];
                    picked[t] = true;
                }
                return result;
            }
            public static void main(String[] args) {
                for ( int i = 0; i < 7; i++ ) {
                    System.out.println(Arrays.toString(flavorSet(4)));
                }
            }
        }

四、多维数组

    public class MultidimensionalPrimitiveArray {
        public static void main(String[] args) {
            //对于基本类型的多维数组，可以通过花括号将每个向量隔开，每对花括号括起来的集合都会把你带到下一级数组。
            int[][] a = {
                    {1, 2 , 3},
                    {4, 5, 6},
                    {7, 8, 9, 10}
            };
            //基本类型的数组的值在不进行显示初始化的情况下，会被自动初始化。对象数组会被初始化为null。
            int[][][] b = new int[2][3][4];
            Integer[][][] c = new Integer[2][3][4];

            //粗糙数组：数组中构成矩阵的每个向量都可以具有任意的长度。
            Random random = new Random(47);
            int[][][] d = new int[random.nextInt(7)][][];
            for ( int i = 0; i < d.length; i++ ) {
                d[i] = new int[random.nextInt(5)][];
                for ( int j = 0; j < d[i].length; j++ ) {
                    d[i][j] = new int[random.nextInt(3)];
                }
            }
            //可以用上边的类似方法处理非基本类型的对象数组。
            BerylliumSphere[][] spheres = {
                    {new BerylliumSphere(), new BerylliumSphere()},
                    {new BerylliumSphere(), new BerylliumSphere(),
                    new BerylliumSphere(), new BerylliumSphere()},
                    {new BerylliumSphere(), new BerylliumSphere(),
                    new BerylliumSphere(), new BerylliumSphere(),
                    new BerylliumSphere(), new BerylliumSphere()}
            };

            //自动包装机制对数组初始化也起作用
            Integer[][] e = {
                    {0, 1 , 2, 3, 4, 5, 6, 7, 8, 9, 10},
                    {11 , 12, 13, 14, 15, 16, 17, 18, 19, 20},
                    {21 , 22, 23, 24, 25, 26, 27, 28, 29, 30},
                    {31 , 32, 33, 34, 35, 36, 37, 38, 39, 40},
            };

            //逐个地、部分地构建一个非基本类型的对象数组
            Integer[][][] f = new Integer[3][][];
            for ( int i = 0; i < f.length; i++ ) {
                f[i] = new Integer[random.nextInt(10)][];
                for ( int j = 0; j < f[i].length; j++ ) {
                    f[i][j] = new Integer[random.nextInt(10)];
                }
            }

            //Arrays.deepToString()对基本数据类型，对象类型数组都起作用
            String[][] g = {
                    {"one", "two", "three", "four"},
                    {"five", "six", "seven", "eight", "nine", "ten"}
            };

            System.out.println(Arrays.deepToString(a));
            System.out.println(Arrays.deepToString(b));
            System.out.println(Arrays.deepToString(c));
            System.out.println(Arrays.deepToString(d));
            System.out.println(Arrays.deepToString(spheres));
            System.out.println(Arrays.deepToString(e));
            System.out.println(Arrays.deepToString(f));
            System.out.println(Arrays.deepToString(g));
        }
    }

五、数组与泛型
    不能实例化具有参数化类型的数组：
        Peel<Banana>[] peels = new Peel<Banana>[10];    //Illegal
    擦除会移除参数类型信息，而数组必须知道他们所持有的确切类型，以强制保证类型安全。
        e.g.:
            class ClassParameter<T> {
                public T[] f(T[] arg) {
                    return arg;
                }
            }
            class MethodParameter{
                public static <T> T[] f(T[] arg) {
                    return arg;
                }
            }
            public class ParameterizeArrayType {
                public static void main(String[] args) {
                    Integer[] ints = {1, 2, 3, 4, 5};
                    Double[] doubles = {1.1, 2.2, 3.3, 4.4, 5.5, 6.6};
                    Integer[] ints2 = new ClassParameter<Integer>().f(ints);
                    Double[] doubles2 = new ClassParameter<Double>().f(doubles);
                    ints2 = MethodParameter.f(ints);
                    doubles2 = MethodParameter.f(doubles);
                }
            }

    尽管不能创建实际的持有泛型的数组对象，但是可以创建非泛型的数组，然后将其转型。
    e.g.:
        public class ArrayOfGenerics {
            public static void main(String[] args) {
                List<String>[] ls;
                List[] la = new List[10];
                ls = (List<String>[])la;
                ls[0] = new ArrayList<>(Arrays.asList("abc"));

                Object[] objects = ls;
                objects[1] = new ArrayList<>(Arrays.asList(123));

                List<BerylliumSphere>[] spheres = new List[10];
                for ( int i = 0; i < spheres.length; i++ ) {
                    spheres[i] = new ArrayList<>(Arrays.asList(new BerylliumSphere()));
                }
                System.out.println(Arrays.deepToString(ls));
                System.out.println(Arrays.deepToString(objects));
                System.out.println(Arrays.deepToString(spheres));
            }
        }

    泛型在类或方法的边界处很有效，而在类或方法的内部，擦除通常会使泛型变得不适用。例如：不能创建泛型数组。
    e.g.:
        class ArrayGenericType<T> {
            T[] array;
            public ArrayGenericType(int size) {
                array = (T[]) new Object[size];
                //!array = new T[]; //Illegal
            }
            //!public <U> U[] makeArray() { return new U[10]; } //Illegal
         }

六、创建测试数据

    1. Arrays.fill()
    e.g.:
        public class FillingArrays {
            public static void main(String[] args) {
                int size = 6;
                boolean[] a1 = new boolean[size];
                byte[] a2 = new byte[size];
                short[] a3 = new short[size];
                char[] a4 = new char[size];
                int[] a5 = new int[size];
                long[] a6 = new long[size];
                float[] a7 = new float[size];
                double[] a8 = new double[size];
                String[] a9 = new String[size];

                Arrays.fill(a1, true);
                Arrays.fill(a2, (byte)127);
                Arrays.fill(a3, (short)3);
                Arrays.fill(a4, 'a');
                Arrays.fill(a5, 1111);
                Arrays.fill(a6, 11111L);
                Arrays.fill(a7, 1.11f);
                Arrays.fill(a8, 1, 3, 2.22);
                Arrays.fill(a9, "ha ");

                System.out.println(Arrays.toString(a1));
                System.out.println(Arrays.toString(a2));
                System.out.println(Arrays.toString(a3));
                System.out.println(Arrays.toString(a4));
                System.out.println(Arrays.toString(a5));
                System.out.println(Arrays.toString(a6));
                System.out.println(Arrays.toString(a7));
                System.out.println(Arrays.toString(a8));
                System.out.println(Arrays.toString(a9));
            }
        }

    2. 数据生成器：
        e.g.:
            public class CountingGeneraotr {

                static char[] chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();

                public static class Boolean implements Generator<java.lang.Boolean> {
                    private boolean value = false;
                    @Override
                    public java.lang.Boolean next() {
                        value = !value;
                        return value;
                    }
                }

                public static class Byte implements Generator<java.lang.Byte> {
                    private byte value = 0;
                    @Override
                    public java.lang.Byte next() { return value++; }
                }

                public static class Short implements Generator<java.lang.Short> {
                    private short value = 1;
                    @Override
                    public java.lang.Short next() {
                        return value++;
                    }
                }

                public static class Character implements Generator<java.lang.Character> {
                    int value = 0;
                    @Override
                    public java.lang.Character next() {
                        return chars[value++ % chars.length ];
                    }
                }

                public static class Integer implements Generator<java.lang.Integer> {
                    private int value = 1;
                    @Override
                    public java.lang.Integer next() { return value++; }
                }

                public static class Long implements Generator<java.lang.Long> {
                    private long value = 1;
                    @Override
                    public java.lang.Long next() {
                        return value++;
                    }
                }

                public static class Float implements Generator<java.lang.Float> {
                    private float value = 1;
                    @Override
                    public java.lang.Float next() {
                        return value++;
                    }
                }

                public static class Double implements Generator<java.lang.Double> {
                    private double value = 1;
                    @Override
                    public java.lang.Double next() {
                        return value++;
                    }
                }

                public static class String implements Generator<java.lang.String> {
                    Random random = new Random(47);
                    @Override
                    public java.lang.String next() {
                        char[] c = new char[10];
                        for ( int i = 0; i < c.length; i++ ) {
                            c[i] = chars[random.nextInt(chars.length)];
                        }
                        return new java.lang.String(c);
                    }
                }
            }

        测试：
            public class TestCountingGenerator {
                public static void test(Class<?> classes) {
                    int size = 10;
                    for ( Class clazz : classes.getClasses()) {
                        System.out.print(clazz.getSimpleName() + " : ");
                        try {
                            Generator<?> g = (Generator<?>) clazz.newInstance();
                            for ( int i = 0; i < size; i++ ) {
                                System.out.print(g.next() + "  ");
                            }
                            System.out.println();
                        } catch (IllegalAccessException e) {
                            e.printStackTrace();
                        } catch (InstantiationException e) {
                            e.printStackTrace();
                        }
                    }
                }

                public static void main(String[] args) {
                    test(CountingGeneraotr.class);
                }
            }

        随机生成器：
        public class RandomGenerator {
            private static Random random = new Random(47);
            public static class Boolean implements Generator<java.lang.Boolean> {
                @Override
                public java.lang.Boolean next() {
                    return random.nextBoolean();
                }
            }
            public static class Byte implements Generator<java.lang.Byte> {
                @Override
                public java.lang.Byte next() {
                    return (byte)random.nextInt();
                }
            }
            public static class Short implements Generator<java.lang.Short> {
                @Override
                public java.lang.Short next() {
                    return (short)random.nextInt();
                }
            }
            public static class Charater implements Generator<java.lang.Character> {
                @Override
                public Character next() {
                    return CountingGenerator.chars[random.nextInt(CountingGenerator.chars.length)];
                }
            }
            public static class Integer implements Generator<java.lang.Integer> {
                @Override
                public java.lang.Integer next() {
                    return random.nextInt();
                }
            }
            public static class Long implements Generator<java.lang.Long> {
                @Override
                public java.lang.Long next() {
                    return random.nextLong();
                }
            }
            public static class Float implements Generator<java.lang.Float> {
                @Override
                public java.lang.Float next() {
                    return random.nextFloat();
                }
            }
            public static class Double implements Generator<java.lang.Double> {
                @Override
                public java.lang.Double next() {
                    return random.nextDouble();
                }
            }
            public static class String implements Generator<java.lang.String> {
                private int size = 10;
                char[] chars = new char[size];
                @Override
                public java.lang.String next() {
                    for ( int i = 0; i < size; i++ ) {
                        chars[i] = new RandomGenerator.Charater().next();
                    }
                    return new java.lang.String(chars);
                }
            }
        }

    3. 从Generator中创建数组:

        包装类数组转换为基本类型数组：
        e.g.:
            public class ConvertTo {
                public static boolean[] primitive(Boolean[] in){
                    boolean[] result = new boolean[in.length];
                    for ( int i = 0; i < in.length; i++ ) {
                        result[i] = in[i];
                    }
                    return result;
                }
                public static byte[] primitive(Byte[] in){
                    byte[] result = new byte[in.length];
                    for ( int i = 0; i < in.length; i++ ) {
                        result[i] = in[i];
                    }
                    return result;
                }
                public static short[] primitive(Short[] in){
                    short[] result = new short[in.length];
                    for ( int i = 0; i < in.length; i++ ) {
                        result[i] = in[i];
                    }
                    return result;
                }
                public static char[] primitive(Character[] in){
                    char[] result = new char[in.length];
                    for ( int i = 0; i < in.length; i++ ) {
                        result[i] = in[i];
                    }
                    return result;
                }
                public static int[] primitive(Integer[] in){
                    int[] result = new int[in.length];
                    for ( int i = 0; i < in.length; i++ ) {
                        result[i] = in[i];
                    }
                    return result;
                }
                public static long[] primitive(Long[] in){
                    long[] result = new long[in.length];
                    for ( int i = 0; i < in.length; i++ ) {
                        result[i] = in[i];
                    }
                    return result;
                }
                public static float[] primitive(Float[] in){
                    float[] result = new float[in.length];
                    for ( int i = 0; i < result.length; i++ ) {
                        result[i] = in[i];
                    }
                    return result;
                }
                public static double[] primitive(Double[] in){
                    double[] result = new double[in.length];
                    for ( int i = 0; i < in.length; i++ ) {
                        result[i] = in[i];
                    }
                    return result;
                }
            }
七、 Arrays实用功能

    1. 复制数组
        System.arrayCopy(Object[] srcArray, int srcIndex, Object[] destArray, int destIndex, int length);
            -对数组的任何越界操作都会导致异常。
            -浅复制：如果复制对象数组，那么只是复制了对象的引用-------而不是对象本身的拷贝。
            -不会执行自动包装和自动拆包，两个数组必须具有相同的确切类型。
        e.g.:
            public class CopyingArrays {
                public static void main(String[] args) {
                    int[] i = new int[7];
                    int[] j = new int[10];
                    Arrays.fill(i, 47);
                    Arrays.fill(j, 99);
                    System.out.println("i = " + Arrays.toString(i));
                    System.out.println("j = " + Arrays.toString(j));

                    System.arraycopy(i, 0, j, 0, i.length);
                    System.out.println("j = " + Arrays.toString(j));

                    int[] k = new int[5];
                    Arrays.fill(k, 103);
                    System.arraycopy(i, 0, k, 0, k.length);
                    System.out.println("k = " + Arrays.toString(k));

                    Arrays.fill(k, 103);
                    System.arraycopy(k, 0, i, 0, k.length);
                    System.out.println("i = " + Arrays.toString(i));

                    Integer[] u = new Integer[10];
                    Integer[] v = new Integer[5];
                    Arrays.fill(u, new Integer(47));
                    Arrays.fill(v, new Integer(99));

                    System.out.println("u = " + Arrays.toString(u));
                    System.out.println("v = " + Arrays.toString(v));

                    System.arraycopy(v, 0, u, u.length/2, v.length);
                    System.out.println("u = " + Arrays.toString(u));
                }
            }
    2. 数组的比较：
        数组相等的条件：
            -元素个数相等
            -对应位置的元素相等（元素使用equals()作比较，对于基本类型，需要使用其包装器类的equals()方法）
        e.g.:
            public class ComparingArrays {
                public static void main(String[] args) {
                    int[] i = new int[10];
                    int[] j = new int[10];
                    Arrays.fill(i, 47);
                    Arrays.fill(j, 47);
                    System.out.println("数组i与数组j ：" + (Arrays.equals(i, j) ? "相同" : "不相同"));
                    i[3] = 99;
                    System.out.println("数组i与数组j ：" + (Arrays.equals(i, j) ? "相同" : "不相同"));

                    String[] m = new String[5];
                    Arrays.fill(m, "biu!");
                    String[] n = new String[]{
                            new String("biu!"), new String("biu!"),
                            new String("biu!"), new String("biu!"),
                            new String("biu!"),
                    };
                    System.out.println("对象数组m与数组n ： " + (Arrays.equals(m, n) ? "相同" : "不相同"));
                }
            }
    3. 数组元素的比较
        e.g.:
            public class CompType implements Comparable<CompType> {
                int i;
                int j;
                private static int count = 1;
                public CompType(int i, int j) {
                    this.i = i;
                    this.j = j;
                }
                public String toString() {
                    String result = "[ i = " + i + " , j = " + j +" ] ";
                    if (count++ % 3 == 0) {
                        result += "\n";
                    }
                    return result;
                }
                @Override
                public int compareTo(CompType o) {
                    return i < o.i ? -1 : (i == o.i ? 0 : 1);
                }
                private static Random random = new Random(47);
                public static Generator<CompType> generator() {
                    return new Generator<CompType>() {
                        @Override
                        public CompType next() {
                            return new CompType(random.nextInt(100), random.nextInt(100));
                        }
                    };
                }

                public static void main(String[] args) {
                    CompType[] a = new CompType[10];
                    for ( int i = 0; i < 10; i++ ) {
                        a[i] = new CompType(random.nextInt(100), random.nextInt(100));
                    }
                    System.out.println("before sorting:");
                    System.out.println(Arrays.toString(a));
                    Arrays.sort(a);
                    System.out.println("after sorting:");
                    System.out.println(Arrays.toString(a));
                }
            }
    4. 数组排序
        e.g.:
            public class StringSorting {
                public static void main(String[] args) {
                    int size = 20;
                    String[] a = new String[size];
                    RandomGenerator.String generator = new RandomGenerator.String();
                    for ( int i = 0; i < size; i++ ) {
                        a[i] = generator.next();
                    }
                    System.out.println("before sort:");
                    System.out.println(Arrays.toString(a));
                    System.out.println("after sort:");
                    //大小写敏感：默认
                    Arrays.sort(a);
                    System.out.println(Arrays.toString(a));
                    System.out.println("after sort2:");
                    //大小写不敏感
                    Arrays.sort(a, String.CASE_INSENSITIVE_ORDER);
                    System.out.println(Arrays.toString(a));
                }
            }

    5. 在已排序的数组中查找
        e.g.:
            public class ArraySearching {
                public static void main(String[] args) {
                    int size = 20;
                    Integer[] a = new Integer[20];
                    RandomGenerator.Integer generator = new RandomGenerator.Integer();
                    for ( int i = 0; i < 20; i++ ) {
                        a[i] = generator.next();
                    }
                    System.out.println("before sort:");
                    System.out.println(Arrays.toString(a));
                    Arrays.sort(a);
                    System.out.println("after sort:");
                    System.out.println(Arrays.toString(a));
                    int r = 688081923;
                    while (true){
                        int location = Arrays.binarySearch(a, r);
                        if (location >= 0) {
                            System.out.println("Location of " + r + " is " + location + ", a[" + location + "] = " + a[location]);
                            break;
                        }
                    }
                }
            }

八、总结：
    “优先容器而不是数组”。
    只有在证明形成成为问题（并且切换到数组对性能提高有所帮助）时，才应该将程序重构为数组。



